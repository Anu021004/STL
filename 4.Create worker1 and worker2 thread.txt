//Create worker1 and worker2 thread  both the threads need to wait for a notification from main() thread, based on the notification T1 should print 1 to 100 and T2 should print 100 to 1.
#include <iostream>
#include <thread>
#include <condition_variable>
using namespace std;

 

mutex mtx;
condition_variable cv;
bool isReady = false;

 

void worker1() {
unique_lock<mutex> lock(mtx);

 

    cv.wait(lock, [] { return isReady; });

 

    for (int i = 1; i <= 100; ++i) {
        cout << "Worker 1: " << i << endl;
    }
}

 

void worker2() {
    unique_lock<mutex> lock(mtx);

 

    cv.wait(lock, [] { return isReady; });

 

    for (int i = 100; i >= 1; --i) {
        cout << "Worker 2: " << i << endl;
    }
}

 

int main() {
    thread t1(worker1);
    thread t2(worker2);

 

    {
        lock_guard<mutex> lock(mtx);
        isReady = true;
    }

 

    cv.notify_all();

 

    t1.join();
    t2.join();

 

    return 0;
}